{"meta":{"title":"Rapheal's Tech Blog","subtitle":"","description":"Raphael's Tech Blog","author":"Raphael","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"dual boot - Ubuntu 20.04 & Windows 10","slug":"dual-boot-Ubuntu-20-04-Windows-10","date":"2021-02-13T06:12:48.000Z","updated":"2021-02-15T14:50:24.570Z","comments":true,"path":"2021/02/13/dual-boot-Ubuntu-20-04-Windows-10/","link":"","permalink":"http://example.com/2021/02/13/dual-boot-Ubuntu-20-04-Windows-10/","excerpt":"","text":"What is UEFI - Unified Extensible Firmware Interface This post resolve my problem perfectly! How do I install Ubuntu alongside a pre-installed Windows with UEFI?","categories":[],"tags":[]},{"title":"AWS","slug":"AWS","date":"2021-02-09T18:26:02.000Z","updated":"2021-02-14T12:35:59.667Z","comments":true,"path":"2021/02/09/AWS/","link":"","permalink":"http://example.com/2021/02/09/AWS/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Jenkins & CI/CD","slug":"Jenkins","date":"2021-02-07T20:49:10.000Z","updated":"2021-02-14T12:35:59.727Z","comments":true,"path":"2021/02/07/Jenkins/","link":"","permalink":"http://example.com/2021/02/07/Jenkins/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"docker-maven-plugin","slug":"Maven-Docker","date":"2021-02-06T09:56:53.000Z","updated":"2021-02-14T12:35:59.779Z","comments":true,"path":"2021/02/06/Maven-Docker/","link":"","permalink":"http://example.com/2021/02/06/Maven-Docker/","excerpt":"","text":"Env: Ubuntu 20.04 1. Docker Registry$ docker run -d -p 5000:5000 --restart=always --name registry2 registry:2 2. Enable docker remote API on docker host$ emacs -nw /usr/lib/systemd/system/docker.service change to one of the follows ExecStart=/usr/bin/dockerd -H=tcp://0.0.0.0:2375 -H=fd:// ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock $ systemctl daemon-reload $ sudo systemctl restart docker.service or $ sudo service docker restart $ curl http://localhost:2375/images/json $ firewall-cmd --zone=public --add-port=2375/tcp --permanent $ firewall-cmd --reload 3. create a java project4. add in porm.xml&lt;plugin&gt; &lt;groupId&gt;com.spotify&lt;/groupId&gt; &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.2.2&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;build-image&lt;/id&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;build&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;configuration&gt; &lt;imageName&gt;rafwang/$&#123;project.artifactId&#125;:$&#123;project.version&#125;&lt;/imageName&gt; &lt;dockerHost&gt;http://127.0.0.1:2375&lt;/dockerHost&gt; &lt;baseImage&gt;java:8&lt;/baseImage&gt; &lt;entryPoint&gt;[&quot;java&quot;, &quot;-jar&quot;,&quot;/$&#123;project.build.finalName&#125;.jar&quot;] &lt;/entryPoint&gt; &lt;resources&gt; &lt;resource&gt; &lt;targetPath&gt;/&lt;/targetPath&gt; &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt; &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/configuration&gt; &lt;/plugin&gt; 5. double click on package in maven6. check the image in docker$ docker images raf@raf-ThinkPad-X240s:~$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE rafwang/maven-docker-spring-boot 0.0.1-SNAPSHOT e0799bb691f9 23 hours ago 660MB &lt;none&gt; &lt;none&gt; ab92bf3237dd 24 hours ago 660MB &lt;none&gt; &lt;none&gt; c3cc3b8939ae 24 hours ago 660MB rafwang/docker-sb latest ab7559f039c3 26 hours ago 672MB 7. run image$ docker run rafwang/maven-docker-spring-boot:0.0.1-SNAPSHOT Problem: JDK version vs base image java:?Since docker-maven-plugin is no more updated, you have to consider if all your used packages support the old version jdk. It will be an awkward situation if jdk version and base image java don’t match.","categories":[],"tags":[]},{"title":"Docker Spring Boot build with Dockerfile","slug":"Docker-Spring-Boot-build-with-Dockerfile","date":"2021-02-05T15:06:39.000Z","updated":"2021-02-14T12:35:59.743Z","comments":true,"path":"2021/02/05/Docker-Spring-Boot-build-with-Dockerfile/","link":"","permalink":"http://example.com/2021/02/05/Docker-Spring-Boot-build-with-Dockerfile/","excerpt":"","text":"Create a spring boot, import springframework.web package. Create a controller package com.example.dockerspringboot.resource; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RequestMapping(“/rest/docker/hello”) @RestController public class HelloRes { @GetMapping public String hello () &#123; return &quot;hello J&quot;; &#125; } porm.xml change finalname to docker-sb.jar define server.port=8085 in application.properties create Dockerfile: FROM openjdk:11 ADD target/docker-sb.jar docker-sb.jar EXPOSE 8085 ENTRYPOINT [“java”,”-jar”,”docker-sb.jar”] create docker image : $ docker build -f Dockerfile -t rafwang/docker-sb . run in docker: $ docker run -p 8085:8085 rafwang/docker-sb visit http://localhost:8085/rest/docker/hello Study Case: docker-springboot video","categories":[],"tags":[]},{"title":"Nacos","slug":"Nacos","date":"2021-02-05T09:54:02.000Z","updated":"2021-02-14T12:35:59.563Z","comments":true,"path":"2021/02/05/Nacos/","link":"","permalink":"http://example.com/2021/02/05/Nacos/","excerpt":"","text":"Start Nacos in docker-compose : services: nacos-registry: image: nacos/nacos-server:1.3.0 container_name: nacos-registry environment: - &quot;MODE=standalone&quot; ports: - 8848:8848 $ docker-compose -f docker-compose-env.yml up -d http://{ip}:8848/nacos/index.html username: nacos password:nacos","categories":[],"tags":[]},{"title":"Docker Stack Deploy","slug":"Docker-Stack-Deploy","date":"2021-02-04T08:16:23.000Z","updated":"2021-02-16T16:32:04.948Z","comments":true,"path":"2021/02/04/Docker-Stack-Deploy/","link":"","permalink":"http://example.com/2021/02/04/Docker-Stack-Deploy/","excerpt":"","text":"Note of the traps and the solutions: 1. RegistryPrivate Registryvideo ref bilan: Create or modify /etc/docker/daemon.json &#123; &quot;insecure-registries&quot;:[&quot;myregistry.example.com:5000&quot;] &#125; Restart docker daemon sudo service daemon-reload &amp;&amp; sudo service docker restart 2. Container networking and DNS servicesDocker Bridge NetworkPort MappingLinking Containers 3. Docker and iptablesMapping to external ip 4. Finding out what package a command came from : example $ dpkg -S &#39;systemd-resolve&#39; systemd: /usr/share/bash-completion/completions/systemd-resolve systemd: /usr/share/man/man8/systemd-resolved.8.gz systemd: /lib/systemd/systemd-resolved systemd: /lib/systemd/system/systemd-resolved.service systemd: /usr/bin/systemd-resolve systemd: /usr/share/man/man8/systemd-resolved.service.8.gz $ dpkg -s systemd Package: systemd Status: install ok installed Priority: important Section: admin Installed-Size: 15084 ..... Description: system and service manager systemd is a system and service... 5. What DNS servers am I using? Both of the follows worked for me : $ nmcli dev show $ systemd-resolve --statusll 6. Auto SSH Login raf@Atua:~$ ssh-keygen -f ~/.ssh/ThinkPad-X240s -t ecdsa -b 521 raf@Atua:~$ ssh-copy-id -i ~/.ssh/ThinkPad-X240s.pub raf@192.168.1.29 7. Docker: Where is “reset to factory defaults” on linux? $ sudo rm -rf /var/lib/docker 8. Enabling GPU access with Compose9. Connect to Naco-Registry $ docker logs --details mall-admin 2021-02-16 09:03:12.221 ERROR 1 --- [ main] c.a.n.c.config.http.ServerHttpAgent : [NACOS SocketTimeoutException httpGet] currentServerAddr:http://nacos-registry:8848， err : connect timed out $ cat /etc/hosts 127.0.0.1 localhost 127.0.1.1 Atua 127.0.0.1 registry.atua.com 192.168.1.29 db 192.168.1.29 nacos-registry 192.168.1.29 redis 192.168.1.29 mongo 192.168.1.29 rabbit $ ping nacos-registry PING nacos-registry (192.168.1.29) 56(84) bytes of data. 64 bytes from db (192.168.1.29): icmp_seq=1 ttl=64 time=65.3 ms http://nacos-registry:8848/nacos/ username/password: nacos/nacos 10. /usr/lib/systemd/system/docker.serviceSometimes, the modification of ExecStart makes restart docker failed. ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock This fixed my problem: $ docker ps Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running? $ sudo systemctl stop docker.socket $ sudo systemctl daemon-reload $ sudo systemctl restart docker The log of systemd may help as well: $ journalctl -f 11. Docker container log $ docker logs mall-admin --since 40 | less 12. listener on a port $ netstat -tln 13. mysql client connect to remote mysql server $ mysql -uroot -proot --default-character-set=utf8 -h db 14. connect to remote Redis server $ redis-cli -h redis -p 6379","categories":[],"tags":[]},{"title":"Install Docker & Docker Commands","slug":"Docker","date":"2021-02-03T20:08:17.000Z","updated":"2021-02-14T12:35:59.695Z","comments":true,"path":"2021/02/03/Docker/","link":"","permalink":"http://example.com/2021/02/03/Docker/","excerpt":"","text":"Install Docker on the Ubuntu Desktop 20.04Here is the document from docker. First I remove the old version: $ sudo apt-get remove docker docker-engine docker.io containerd runc Then I Installed using the convenience script. Here it is: $ curl -fsSL https://get.docker.com -o get-docker.sh $ sudo sh get-docker.sh Remeber to add your accound to the docker group after the installation. $ sudo usermod -aG docker &lt;your-user&gt; And you need to check if the docker command is belong to docker group. Usually it is belong to root group. $ ls -al `which docker` If not, you need to change the group manually. $ sudo chgrp docker `which docker` To test if the installation is working correctly: $ docker run hello-world If you encounter the permission denied issue, try: $ sudo systemctl restart docker and logout. This worked for me. Basic Docker CommandsStart a container $ docker run nginx List containers ~$ docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 8db74ee17b0d nginx &quot;/docker-entrypoint.…&quot; About a minute ago Up About a minute 80/tcp thirsty_lehmann fefbc75c1d6e hello-world &quot;/hello&quot; 8 minutes ago Exited (0) 8 minutes ago great_feynman Stop a container $ docker stop thirsty_lehmann Remove a container $ docker rm thirsty_lehmann List images $ docker images Remove images $ docker rmi nginx Download un image $ docker pull nginx Run a command in the container of ubuntu $ docker run ubuntu sleep 100 $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 796ba8ba8091 ubuntu &quot;sleep 100&quot; 9 seconds ago Up 7 seconds beautiful_euclid $ docker exec beautiful_euclid cat /etc/hosts 127.0.0.1 localhost ::1 localhost ip6-localhost ip6-loopback Detach and attach $ docker run -d nginx Docker Command line Document Docker Official Images on Docker Hub Document Docker Hub: https://hub.docker.com/ Runtag: 12345$ docker run redis:4.0$ docker run kodekloud&#x2F;simple-prompt-docker Welcome! Please enter your name: Hello and Welcome ! Stdin 1234$ docker run -i kodekloud&#x2F;simple-prompt-docker Welcome! Please enter your name: hallo-kettyHello and Welcome hallo-ketty! Terminal Mode 1$ docker run -it kodekloud&#x2F;simple-prompt-docker Port mapping 1$ docker run -p new_port:container_port kodekloud&#x2F;simple-webapp Volume mapping 12$ docker run -v new_file:container_file mysql$ docker run -v &#x2F;opt&#x2F;datadir:&#x2F;var&#x2F;lib&#x2F;mysql mysql Inspect Container 12$ docker inspect container_name$ docker inspect -f &#39;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#39; container_name logs 1$ docker logs container_name ENV variables 1$ docker run -e ENV_VAR&#x3D;env_var_value image_name Containerizing create a dockerfile docker build Dockerfile -t account_name/image_name docker push account_name/image_name dockerfile: start from a base OS or another image: FROM Ubuntu install all dependencies: RUN apt-get update RUN apt-get install python RUN pip install flask RUN pip install flask-mysql Copy source code: COPY . /opt/source-code Specify Entrypoint: ENTRYPOINT FLASK_APP=/opt/source-code/app.py flask run CMD &amp; ENTRYPOINTIn the dockerfile, the CMD instruction has three forms: CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;] (exec form, this is the preferred form) CMD [&quot;param1&quot;,&quot;param2&quot;] (as default parameters to ENTRYPOINT) CMD command param1 param2 (shell form) There can only be one CMD instruction in a Dockerfile. If you list more than one CMD then only the last CMD will take effect. ENTRYPOINT has two forms: The exec form, which is the preferred form: 1ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] The shell form: 1ENTRYPOINT command param1 param2 An ENTRYPOINT allows you to configure a container that will run as an executable. NetworkingDefault Networking: docker run ubuntu With –networking flag, None network: docker run ubuntu --networking=none Attach to the ports of the host docker run ubuntu --networking=host Choose the IP addresses for the container with –ip and –ip6 flags docker run -itd --network=my-net --ip=10.10.9.75 ubuntu Command Description docker network connect Connect a container to a network docker network create Create a network docker network disconnect Disconnect a container from a network docker network inspect Display detailed information on one or more networks docker network ls List networks docker network prune Remove all unused networks docker network rm Remove one or more networks docker network create --driver bridge --subnet 182.18.0.0\\16 [NAME] Inspect Network: docker inspect [IMAGE NAME] Embedded DNS Storage$ sudo ls /var/lib/docker/ buildkit containers image network overlay2 plugins runtimes swarm tmp trust volumesaufs Volume flag allow to persist data : docker volume create data_volume Then docker will create a directory /var/lib/docker/volumes/data_volume docker run -v data_volume:/var/lib/mysql mysql Or to bind to a local location: docker run -v /data/mysql:/var/lib/mysql mysql Or bind to a storage driver: docker run –mount type=bind,source=/data/mysql,target=/var/lib/mysql mysql Docker Compose–linkdocker run -d --name=redis redis docker run -d --name=db mysql docker run -d --name=vote -p 5000:80 --link redis:redis voting-app docker run -d --name=result -p 5001:80 --link db:db result-app docker run -d --name=worker --link db:db --link redis:redis worker To docker-compose.yml Services: redis: image: &quot;redis&quot; db: image: &quot;mysql&quot; vote: image: &quot;voting-app&quot; ports: - 5000:80 links: - redis result: image: &quot;result-app&quot; ports: - 5001:80 links: -db worker: image: &quot;worker&quot; links: - redis - db -buildServices: redis: image: &quot;redis&quot; db: image: &quot;mysql&quot; vote: build: ./voting-app ports: - 5000:80 links: - redis result: build: ./result-app ports: - 5001:80 links: -db worker: build: ./worker links: - redis - db $ docker-compose up Docker compose -version Front-end &amp; back-end network Services: redis: image: &quot;redis&quot; networks: - back-end db: image: &quot;mysql&quot; networks: - back-end vote: build: ./voting-app ports: - 5000:80 links: - redis networks: - front-end result: build: ./result-app ports: - 5001:80 links: -db networks: - front-end worker: build: ./worker links: - redis - db networks: - back-end networks: front-end: back-end: Docker Registryprivate registry: docker login private-registry.io docker run private-registry.io/app/interal-app deploy private registry: docker run -d -p 5000:5000 --name=registry registry:2 docker image tag my-image localhost:5000/my-image docker push localhost:5000/my-image docker pull localhost:5000/my-image docker pull 192.168.56.100:/my-image 踩坑： image需要被push到registry中才能被pull，而不是存在host主机的images里面。registry是一个服务，而不是docker本身的功能。浪费了很多时间在这个点上，心痛，gl video ref Engine docker run --cpus=0.5 ubuntu docker run --memory=100m ubuntu Engine Container Orchestrationdocker service create --duplicas=100 nodejs Solutions: docker swarm, kubernetes, MESOS Docker SwarmResponsible for load balancing on the docker hostsOn Swarm Manager: $ docker swarm init On swarm workers: $ docker swarm join --token &lt;token&gt; Then on the manager again: $ docker service create --replicas=3 -p 8080:80 my-web-server kubernetes$ kubectl run --replicas=1000 my-web-server $ kubectl scale --replicas=2000 my-web-server $ kubectl rolling-update my-web-server --image=web-server:2 $ kubectl rolling-update my-web-server --rollback ref VIDEO https://yeasy.gitbook.io/docker_practice/","categories":[],"tags":[]},{"title":"Deploy Hexo To Github","slug":"Deploy-Hexo-To-Github","date":"2021-01-26T17:32:16.000Z","updated":"2021-02-14T12:35:59.647Z","comments":true,"path":"2021/01/26/Deploy-Hexo-To-Github/","link":"","permalink":"http://example.com/2021/01/26/Deploy-Hexo-To-Github/","excerpt":"","text":"Recently, I am working on a mini project. It has been years that I touch no more coding. A lot of new frameworks pump me up. And I feel it is real worth to note this experience on the blog. So I am starting with deploy a blog. Voila comme ci-dessous. Local Env: Ubuntu 20.04, Thinkpad X240sStep 1. install hexo on the local machinesudo npm install -g hexo-cli cd &amp;&amp; mkdir Blog &amp;&amp; cd Blog hexo init Step 2. change themecd ~/Blog/ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia Then add theme config to _config.yml don’t foget to set theme yilia don’t foget to tab a space between colon and value don’t repeat the key theme: yilia deploy: &nbsp;&nbsp;&nbsp;&nbsp; type: git &nbsp;&nbsp;&nbsp;&nbsp; repo: https://github.com/Raphael-De-Wang/Raphael-De-Wang.github.io.git &nbsp;&nbsp;&nbsp;&nbsp; branch: master Step 3. add a posthexo n &quot;post name&quot; The new post will be created in the fold source/_posts hexo clean hexo g hexo s Start the hexo server in local, preview the post in localhost:4000 Step 4. depoly to Githubcreate a new project, pick the name same as your username, plus github.io, then push the hexo to github. hexo clean hexo g hexo d Don’t forget to set the github username and email before push","categories":[],"tags":[{"name":"Github, Hexo","slug":"Github-Hexo","permalink":"http://example.com/tags/Github-Hexo/"}]}],"categories":[],"tags":[{"name":"Github, Hexo","slug":"Github-Hexo","permalink":"http://example.com/tags/Github-Hexo/"}]}